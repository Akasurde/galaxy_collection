---
- name: Test the execution environment (EE) repository module
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  collections:
    - redhat_cop.ah_configuration
  vars:
    ah_host: hub.lab.example.com
    ah_username: admin
    ah_password: redhat
    ah_path_prefix: galaxy
    ah_validate_certs: false
    repository: ansible-automation-platform-20-early-access/ee-minimal-rhel8
    tag: latest
    fake_image: quay.io/ansible/http-test-container:latest

  tasks:
    # Preparing an image:
    # - Pulling a small image from Quay (does not matter what image it is)
    # - Tagging it so that it can be pushed to private automation hub
    # - Pushing the image
    # - Deleting the images from the local system
    # The tasks do not use the podman collection because it may not be
    # available on the testing system.
    - name: Ensure a small container image is available
      command:
        cmd: "podman pull {{ fake_image }}"
      changed_when: true

    - name: Ensure the image has the correct tag
      command:
        cmd: "podman tag {{ fake_image }} {{ ah_host }}/{{ repository }}:{{ tag }}"
      changed_when: true

    - name: Ensure the image is pushed in private automation hub
      command:
        cmd: "podman push --tls-verify=false --remove-signatures
              --creds={{ ah_username }}:{{ ah_password }}
              {{ ah_host }}/{{ repository }}:{{ tag }}"
      changed_when: true

    - name: Ensure the images are removed
      command:
        cmd: "podman rmi {{ fake_image }} {{ ah_host }}/{{ repository }}:{{ tag }}"
      changed_when: true

    # Adding a description and a README file to the repository
    - name: Ensure the repository has a description and a README file
      ah_ee_repository:
        name: "{{ repository }}"
        # Testing with UTF-8 characters
        description: To jest jakiś opis
        readme: |
          # Min avrättningsmiljö

          * bullet 1
          * bullet 2
        state: updated
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"

    # Preparing a README file
    - name: Ensure a temporary file exists
      tempfile:
      register: tempfile

    - name: Ensure some contents are stored in the temporary file
      copy:
        dest: "{{ tempfile['path'] }}"
        mode: 0600
        content: |
          # Mi entorno de ejecución

          * bullet 1
          * bullet 2

    # Testing updating the repository README file from a local file
    - name: Ensure the repository README file it set from a local file
      ah_ee_repository:
        name: "{{ repository }}"
        readme_file: "{{ tempfile['path'] }}"
        state: updated
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"

    - name: Ensure the temporary file is removed
      file:
        path: "{{ tempfile['path'] }}"
        state: absent

    # Testing adding tags to the image
    - name: Ensure the repository image has the additionnal required tags
      ah_ee_image:
        name: "{{ repository }}:{{ tag }}"
        state: updated
        tags:
          - v2
          - "2.0"
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"

    - name: Ensure the repository image has a defined set of tags
      ah_ee_image:
        name: "{{ repository }}:{{ tag }}"
        state: updated
        append: false
        tags:
          - prod2
          - prod2.0
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"

    - name: Reset the original tag
      ah_ee_image:
        name: "{{ repository }}:prod2"
        state: updated
        append: false
        tags: "{{ tag }}"
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"

    - name: Ensure the image does not exist
      ah_ee_image:
        name: "{{ repository }}:{{ tag }}"
        state: absent
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"


    # Testing repository deletion
    - name: Ensure the repository does not exist
      ah_ee_repository:
        name: "{{ repository }}"
        state: absent
        ah_host: "{{ ah_host }}"
        ah_username: "{{ ah_username }}"
        ah_password: "{{ ah_password }}"
        ah_path_prefix: "{{ ah_path_prefix }}"
        validate_certs: "{{ ah_validate_certs }}"
...
